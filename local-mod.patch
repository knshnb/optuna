diff --git a/benchmarks/run_bayesmark.py b/benchmarks/run_bayesmark.py
index 21ef38186..ad77da4eb 100644
--- a/benchmarks/run_bayesmark.py
+++ b/benchmarks/run_bayesmark.py
@@ -25,9 +25,9 @@ def run_benchmark(args: argparse.Namespace) -> None:
     pruner_kwargs_list = args.pruner_kwargs_list.split()
 
     config = dict()
-    for sampler, sampler_kwargs in zip(sampler_list, sampler_kwargs_list):
+    for i, (sampler, sampler_kwargs) in enumerate(zip(sampler_list, sampler_kwargs_list)):
         for pruner, pruner_kwargs in zip(pruner_list, pruner_kwargs_list):
-            optimizer_name = f"{sampler}-{pruner}"
+            optimizer_name = f"{sampler}-{pruner}-{i}"
             optimizer_kwargs = {
                 "sampler": sampler,
                 "sampler_kwargs": json.loads(sampler_kwargs),
@@ -165,13 +165,15 @@ if __name__ == "__main__":
     parser = argparse.ArgumentParser()
     parser.add_argument("--dataset", type=str, default="iris")
     parser.add_argument("--model", type=str, default="kNN")
-    parser.add_argument("--budget", type=int, default=80)
-    parser.add_argument("--n-runs", type=int, default=10)
-    parser.add_argument("--sampler-list", type=str, default="TPESampler CmaEsSampler")
+    parser.add_argument("--budget", type=int, default=2000)
+    parser.add_argument("--n-runs", type=int, default=100)
+    parser.add_argument(
+        "--sampler-list", type=str, default="CmaEsSampler CmaEsSampler"
+    )
     parser.add_argument(
         "--sampler-kwargs-list",
         type=str,
-        default='{"multivariate":true,"constant_liar":true} {}',
+        default='{} {"use_cma_with_margin":true}',
     )
     parser.add_argument("--pruner-list", type=str, default="NopPruner")
     parser.add_argument("--pruner-kwargs-list", type=str, default="{}")
diff --git a/benchmarks/run_kurobako.py b/benchmarks/run_kurobako.py
index 14edaf427..4b5afd722 100644
--- a/benchmarks/run_kurobako.py
+++ b/benchmarks/run_kurobako.py
@@ -55,9 +55,9 @@ def run(args: argparse.Namespace) -> None:
             f"pruner_list: {pruner_list}, pruner_keyword_arguments: {pruner_kwargs_list}."
         )
 
-    for sampler, sampler_kwargs in zip(sampler_list, sampler_kwargs_list):
+    for i, (sampler, sampler_kwargs) in enumerate(zip(sampler_list, sampler_kwargs_list)):
         for pruner, pruner_kwargs in zip(pruner_list, pruner_kwargs_list):
-            name = f"{args.name_prefix}_{sampler}_{pruner}"
+            name = f"{args.name_prefix}_{sampler}_{pruner}_{i}"
             cmd = (
                 f"{kurobako_cmd} solver --name {name} optuna --loglevel debug "
                 f"--sampler {sampler} --sampler-kwargs {sampler_kwargs} "
@@ -96,16 +96,35 @@ if __name__ == "__main__":
     parser = argparse.ArgumentParser()
     parser.add_argument("--path-to-kurobako", type=str, default="")
     parser.add_argument("--name-prefix", type=str, default="")
-    parser.add_argument("--budget", type=int, default=80)
+    parser.add_argument("--budget", type=int, default=2000)
     parser.add_argument("--n-runs", type=int, default=100)
-    parser.add_argument("--n-jobs", type=int, default=10)
+    parser.add_argument("--n-jobs", type=int, default=8)
     parser.add_argument("--n-concurrency", type=int, default=1)
-    parser.add_argument("--sampler-list", type=str, default="RandomSampler TPESampler")
+    # parser.add_argument(
+    #     "--sampler-list", type=str, default="RandomSampler TPESampler CmaEsSampler CmaEsSampler"
+    # )
+    # parser.add_argument(
+    #     "--sampler-kwargs-list",
+    #     type=str,
+    #     default=r"{} {\"multivariate\":true} {} {\"use_cma_with_margin\":true}",
+    # )
+    parser.add_argument(
+        "--sampler-list", type=str, default="CmaEsSampler CmaEsSampler"
+    )
     parser.add_argument(
         "--sampler-kwargs-list",
         type=str,
-        default=r"{} {\"multivariate\":true\,\"constant_liar\":true}",
+        default=r"{} {\"use_cma_with_margin\":true}",
     )
+    # parser.add_argument(
+    #     "--sampler-list", type=str, default="CmaEsSampler"
+    # )
+    # parser.add_argument(
+    #     "--sampler-kwargs-list",
+    #     type=str,
+    #     # default=r"{}",
+    #     default=r"{\"use_cma_with_margin\":true}",
+    # )
     parser.add_argument("--pruner-list", type=str, default="NopPruner")
     parser.add_argument("--pruner-kwargs-list", type=str, default="{}")
     parser.add_argument("--seed", type=int, default=0)
